// <auto-generated />
using System;
using EnglishExamOnline.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnglishExamOnline.Backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210511173415_update-user-result")]
    partial class updateuserresult
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContestName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ContestScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ContestId");

                    b.HasIndex("ContestScheduleId");

                    b.ToTable("Contests");

                    b.HasData(
                        new
                        {
                            ContestId = 100,
                            ContestName = "English Test (Morning) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 858, DateTimeKind.Local).AddTicks(8361),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = true
                        },
                        new
                        {
                            ContestId = 101,
                            ContestName = "English Test (Morning) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2600),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = true
                        },
                        new
                        {
                            ContestId = 102,
                            ContestName = "English Test (Morning) - ETS 21",
                            ContestScheduleId = 2,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2666),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = true
                        },
                        new
                        {
                            ContestId = 103,
                            ContestName = "English Test (Afternoon) - ETS 21",
                            ContestScheduleId = 2,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2673),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = true
                        },
                        new
                        {
                            ContestId = 104,
                            ContestName = "English Test (Night) - ETS 21",
                            ContestScheduleId = 2,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2678),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = true
                        },
                        new
                        {
                            ContestId = 105,
                            ContestName = "English Test (Afternoon) - ETS 21",
                            ContestScheduleId = 3,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2682),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = true
                        },
                        new
                        {
                            ContestId = 106,
                            ContestName = "English Test (Morning) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2687),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = false
                        },
                        new
                        {
                            ContestId = 107,
                            ContestName = "English Test (Afternoon) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2692),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = false
                        },
                        new
                        {
                            ContestId = 108,
                            ContestName = "English Test (Night) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2696),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = false
                        },
                        new
                        {
                            ContestId = 109,
                            ContestName = "English Test (Night) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2700),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = false
                        },
                        new
                        {
                            ContestId = 110,
                            ContestName = "English Test (Afternoon) - ETS 21",
                            ContestScheduleId = 1,
                            CreatedDate = new DateTime(2021, 5, 12, 0, 34, 13, 861, DateTimeKind.Local).AddTicks(2705),
                            Description = "The ETS is an international standardized test of English language proficiency for non-native speakers. It is intentionally designed to measure the everyday English skills of people working in an international environment.",
                            Status = false
                        });
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.ContestRegist", b =>
                {
                    b.Property<int>("ContestRegistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContestRegistId");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestRegists");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.ContestSchedule", b =>
                {
                    b.Property<int>("ContestScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ContestScheduleId");

                    b.ToTable("ContestSchedules");

                    b.HasData(
                        new
                        {
                            ContestScheduleId = 1,
                            Length = 60,
                            StartTime = new DateTime(2021, 4, 12, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContestScheduleId = 2,
                            Length = 60,
                            StartTime = new DateTime(2021, 5, 25, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContestScheduleId = 3,
                            Length = 60,
                            StartTime = new DateTime(2021, 5, 25, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContestScheduleId = 4,
                            Length = 60,
                            StartTime = new DateTime(2021, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContestScheduleId = 5,
                            Length = 60,
                            StartTime = new DateTime(2021, 5, 27, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuestionInfo")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            AnswerA = "locations",
                            AnswerB = "locate",
                            AnswerC = "located",
                            AnswerD = "location",
                            CorrectAnswer = "locations",
                            QuestionInfo = "Sunwirth Sneakers has several ------- in the greater metropolitan area."
                        },
                        new
                        {
                            QuestionId = 2,
                            AnswerA = "buying",
                            AnswerB = "paying",
                            AnswerC = "going",
                            AnswerD = "eating",
                            CorrectAnswer = "paying",
                            QuestionInfo = "Cimber CPAs offers clients the convenience of ------- their invoices online and by mail."
                        },
                        new
                        {
                            QuestionId = 3,
                            AnswerA = "reliable",
                            AnswerB = "to rely",
                            AnswerC = "more reliable",
                            AnswerD = "reliably",
                            CorrectAnswer = "reliably",
                            QuestionInfo = "The new software at Patel Industries has been working ------- since it was installed last year."
                        },
                        new
                        {
                            QuestionId = 4,
                            AnswerA = "along",
                            AnswerB = "toward",
                            AnswerC = "over",
                            AnswerD = "throughout",
                            CorrectAnswer = "throughout",
                            QuestionInfo = "Best practices in customer service are outlined ------- the training handbook."
                        },
                        new
                        {
                            QuestionId = 5,
                            AnswerA = "simple",
                            AnswerB = "simpler",
                            AnswerC = "simply",
                            AnswerD = "simplicity",
                            CorrectAnswer = "simply",
                            QuestionInfo = "The Scratch software will help us migrate our client records -------."
                        },
                        new
                        {
                            QuestionId = 6,
                            AnswerA = "herself",
                            AnswerB = "her",
                            AnswerC = "she",
                            AnswerD = "hers",
                            CorrectAnswer = "her",
                            QuestionInfo = "The comedian said that ------- sense of humor was inherited from a grandparent."
                        },
                        new
                        {
                            QuestionId = 7,
                            AnswerA = "from",
                            AnswerB = "beside",
                            AnswerC = "along",
                            AnswerD = "after",
                            CorrectAnswer = "from",
                            QuestionInfo = "Starting this August, Gavelton Bike Tours will be leading group cycling trips ------- Paris to Berlin."
                        },
                        new
                        {
                            QuestionId = 8,
                            AnswerA = "reach",
                            AnswerB = "talk",
                            AnswerC = "reason",
                            AnswerD = "put",
                            CorrectAnswer = "reach",
                            QuestionInfo = "We hope to ------- an agreement with Mason Cooper, Inc., within the next week."
                        },
                        new
                        {
                            QuestionId = 9,
                            AnswerA = "if",
                            AnswerB = "to",
                            AnswerC = "of",
                            AnswerD = "as",
                            CorrectAnswer = "of",
                            QuestionInfo = "Factory-floor managers must submit an inspection report at the end ------- their shift."
                        },
                        new
                        {
                            QuestionId = 10,
                            AnswerA = "Sometimes",
                            AnswerB = "Later",
                            AnswerC = "Formerly",
                            AnswerD = "Frequently",
                            CorrectAnswer = "Formerly",
                            QuestionInfo = "------- a retail store, Seedum International will now sell merchandise only through its Web site."
                        },
                        new
                        {
                            QuestionId = 11,
                            AnswerA = "or",
                            AnswerB = "and",
                            AnswerC = "with",
                            AnswerD = "nor",
                            CorrectAnswer = "nor",
                            QuestionInfo = "Remarkably, neither Ms. Chen ------- Mr. Gillespie had been notified that the board meeting was canceled."
                        },
                        new
                        {
                            QuestionId = 12,
                            AnswerA = "rigid",
                            AnswerB = "most rigidly",
                            AnswerC = "rigidly",
                            AnswerD = "more rigid",
                            CorrectAnswer = "more rigid",
                            QuestionInfo = "The new microwave soup containers are ------- than the previous ones."
                        },
                        new
                        {
                            QuestionId = 13,
                            AnswerA = "regular",
                            AnswerB = "general",
                            AnswerC = "proud",
                            AnswerD = "favorite",
                            CorrectAnswer = "proud",
                            QuestionInfo = "The Banly Tourism Society is ------- to present the first issue of its publication, The Banly Quarterly."
                        },
                        new
                        {
                            QuestionId = 14,
                            AnswerA = "evaluate",
                            AnswerB = "evaluation",
                            AnswerC = "evaluator",
                            AnswerD = "evaluative",
                            CorrectAnswer = "evaluation",
                            QuestionInfo = "Konixer Printers is conducting a thorough ------- of current requests for equipment upgrades."
                        },
                        new
                        {
                            QuestionId = 15,
                            AnswerA = "Despite",
                            AnswerB = "Across",
                            AnswerC = "Besides",
                            AnswerD = "Inside",
                            CorrectAnswer = "Despite",
                            QuestionInfo = "------- the addition of 300 spaces, the ferry terminal’s parking area is still full by 9:00 A.M. every day."
                        },
                        new
                        {
                            QuestionId = 16,
                            AnswerA = "collaboration",
                            AnswerB = "collaborative",
                            AnswerC = "collaboratively",
                            AnswerD = "collaborate",
                            CorrectAnswer = "collaboratively",
                            QuestionInfo = "Justlox, Inc., is planning to ------- redesign Model 543Q with its partners in Britain to ensure a better product."
                        },
                        new
                        {
                            QuestionId = 17,
                            AnswerA = "assortment",
                            AnswerB = "excitement",
                            AnswerC = "account",
                            AnswerD = "industry",
                            CorrectAnswer = "assortment",
                            QuestionInfo = "Each box of Lane Permanent Markers contains an ------- of surprising colors."
                        },
                        new
                        {
                            QuestionId = 18,
                            AnswerA = "safe",
                            AnswerB = "close",
                            AnswerC = "clean",
                            AnswerD = "prompt",
                            CorrectAnswer = "prompt",
                            QuestionInfo = "We were pleased by the ------- and courteous reply we received from Astella Airlines concerning the change in itinerary."
                        },
                        new
                        {
                            QuestionId = 19,
                            AnswerA = "grow",
                            AnswerB = "growth",
                            AnswerC = "grew",
                            AnswerD = "grown",
                            CorrectAnswer = "growth",
                            QuestionInfo = "The rising employment rate is one factor contributing to ------- in the housing construction trade."
                        },
                        new
                        {
                            QuestionId = 20,
                            AnswerA = "specify",
                            AnswerB = "specified",
                            AnswerC = "specifying",
                            AnswerD = "specification",
                            CorrectAnswer = "specified",
                            QuestionInfo = "The color of the new chairs was not ------- on the invoice"
                        });
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.QuestionDetail", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "ContestId");

                    b.HasIndex("ContestId");

                    b.ToTable("QuestionDetails");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            ContestId = 100,
                            Index = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            ContestId = 100,
                            Index = 2
                        },
                        new
                        {
                            QuestionId = 3,
                            ContestId = 100,
                            Index = 3
                        },
                        new
                        {
                            QuestionId = 4,
                            ContestId = 100,
                            Index = 4
                        },
                        new
                        {
                            QuestionId = 5,
                            ContestId = 100,
                            Index = 5
                        },
                        new
                        {
                            QuestionId = 6,
                            ContestId = 100,
                            Index = 6
                        },
                        new
                        {
                            QuestionId = 7,
                            ContestId = 100,
                            Index = 7
                        },
                        new
                        {
                            QuestionId = 8,
                            ContestId = 100,
                            Index = 8
                        },
                        new
                        {
                            QuestionId = 9,
                            ContestId = 100,
                            Index = 9
                        },
                        new
                        {
                            QuestionId = 10,
                            ContestId = 100,
                            Index = 10
                        },
                        new
                        {
                            QuestionId = 11,
                            ContestId = 101,
                            Index = 11
                        },
                        new
                        {
                            QuestionId = 12,
                            ContestId = 101,
                            Index = 12
                        },
                        new
                        {
                            QuestionId = 13,
                            ContestId = 101,
                            Index = 13
                        },
                        new
                        {
                            QuestionId = 14,
                            ContestId = 101,
                            Index = 14
                        },
                        new
                        {
                            QuestionId = 15,
                            ContestId = 101,
                            Index = 15
                        },
                        new
                        {
                            QuestionId = 16,
                            ContestId = 101,
                            Index = 16
                        },
                        new
                        {
                            QuestionId = 17,
                            ContestId = 101,
                            Index = 17
                        },
                        new
                        {
                            QuestionId = 18,
                            ContestId = 101,
                            Index = 18
                        },
                        new
                        {
                            QuestionId = 19,
                            ContestId = 101,
                            Index = 19
                        },
                        new
                        {
                            QuestionId = 20,
                            ContestId = 101,
                            Index = 20
                        });
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContestRegistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumOfCorrect")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("ContestRegistId")
                        .IsUnique();

                    b.ToTable("Results");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2243634607",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36d8d8ad-6a03-4378-93b4-82bf94119a2f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@vp.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VP.COM",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBenOSxH+bcFvH6vCRyfkNim2W3/+kNrvTv1b8oXQkM1Pxyg3JQaDXw06c/AHBquBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "4695426118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e8cbbc7-25f5-4ed0-a151-0d4637d41102",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@vp.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VP.COM",
                            NormalizedUserName = "user",
                            PasswordHash = "AQAAAAEAACcQAAAAEODPU+kz7+ETbpvCfGAxyRvkYvpc0xSDD0WNK+2B6Qt9AmZH+l5Pyv38lgFTo9hSiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "7200984639",
                            ConcurrencyStamp = "2b774ac9-bd59-4afc-a038-938cced802ea",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4835914310",
                            ConcurrencyStamp = "4025b78c-bc15-43e5-afd0-21eb1795bdbf",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2243634607",
                            RoleId = "7200984639"
                        },
                        new
                        {
                            UserId = "4695426118",
                            RoleId = "4835914310"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Contest", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.ContestSchedule", "ContestSchedule")
                        .WithMany("Contests")
                        .HasForeignKey("ContestScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestSchedule");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.ContestRegist", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.Contest", "Contest")
                        .WithMany("ContestRegists")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishExamOnline.Backend.Models.User", "Users")
                        .WithMany("ContestRegists")
                        .HasForeignKey("UserId");

                    b.Navigation("Contest");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.QuestionDetail", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.Contest", "Contest")
                        .WithMany("QuestionDetails")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishExamOnline.Backend.Models.Question", "Question")
                        .WithMany("QuestionDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Result", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.ContestRegist", "ContestRegist")
                        .WithOne("Result")
                        .HasForeignKey("EnglishExamOnline.Backend.Models.Result", "ContestRegistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContestRegist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnglishExamOnline.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EnglishExamOnline.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Contest", b =>
                {
                    b.Navigation("ContestRegists");

                    b.Navigation("QuestionDetails");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.ContestRegist", b =>
                {
                    b.Navigation("Result");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.ContestSchedule", b =>
                {
                    b.Navigation("Contests");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.Question", b =>
                {
                    b.Navigation("QuestionDetails");
                });

            modelBuilder.Entity("EnglishExamOnline.Backend.Models.User", b =>
                {
                    b.Navigation("ContestRegists");
                });
#pragma warning restore 612, 618
        }
    }
}
